package main

import (
	"errors"
	"fmt"
	"math"
)

func sqrt(x float64) (float64, error) {
	if x < 0 {
		return 0, errors.New("x is negative")
	}
	return math.Sqrt(x), nil
}

func process(data []byte) error {
	if len(data) == 0 {
		return errors.New("Error:data is empty")
	}
	return nil
}

func main() {
	fmt.Println(sqrt(2))
	fmt.Println(sqrt(-2))
	fmt.Println(process([]byte{}))
	fmt.Println(process([]byte{1, 2, 3}))
	fmt.Println("--------------------------------")
	if result, err := sqrt(3); err == nil {
		fmt.Println(result)
	}
	if err := work(); err != nil {
		fmt.Println(err)
	}
	if err := readData(); err != nil {
		fmt.Println(err)
	}
}

type myError struct {
	message string
}

func (e *myError) Error() string {
	return fmt.Sprintf("myError: %s", e.message)
}

func work() error {
	return &myError{message: "Custom error"}
}

func readData() error {
	err := readConfig()
	if err != nil {
		return fmt.Errorf("readData: %w", err)
	}
	return nil
}

func readConfig() error {
	return errors.New("readConfig error")
}
